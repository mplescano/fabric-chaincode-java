/*
 * Copyright IBM Corp. 2018 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'maven-publish'
    id 'jacoco'
}

dependencies {
    compile project(':fabric-chaincode-protos')
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.7.Final'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.59'
    compile 'org.bouncycastle:bcprov-jdk15on:1.59'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }

    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }

}

publishing {
    publications {
        // define the publication of the shim jar
        shimJar(MavenPublication) {
            from components.java
            artifactId 'fabric-chaincode-shim'
        }
    }
}

publishing {
    repositories {
        // hyperledger snapshots repository
        maven {
            url 'https://nexus.hyperledger.org/content/repositories/snapshots'
            name 'hyperledger-snapshots'
        }
        // hyperledger release repository
        maven {
            url 'https://nexus.hyperledger.org/content/repositories/releases'
            name 'hyperledger-releases'
        }
    }
}

jacoco {
    toolVersion = "0.7.+"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'org/hyperledger/fabric/protos/**')
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['org.hyperledger.fabric.shim.helper.Channel',
                        'org.hyperledger.fabric.shim.impl.Handler',
                        'org.hyperledger.fabric.shim.impl.ChaincodeSupportStream.1']
            limit {
                minimum = 0.86
            }
        }

        rule {
            element = 'CLASS'
            includes = ['org.hyperledger.fabric.shim.helper.Channel',
                        'org.hyperledger.fabric.shim.impl.Handler']
            limit {
                minimum = 0.79
            }
        }
    }
}

test.finalizedBy(jacocoTestReport)
test.finalizedBy(jacocoTestCoverageVerification)

task licenseCheck {
    group = "license"
    description = "Checks the License part of each source file"

    println "Checking Licences..."
    def noSPDX = new LinkedList<File>()
    def missing = new LinkedList<File>()
    sourceSets.forEach {
        sourceSet ->
            sourceSet.allSource.findAll { !it.path.contains("build") && !it.path.contains("test/resources")}.each {
                file ->
                    BufferedReader r = new BufferedReader(new FileReader(file))
                    def line, hasSPDX = false, hasTraditional = false
                    while ((line = r.readLine()) != null) {
                        if (line.contains("SPDX-License-Identifier")) {
                            hasSPDX = true
                            break
                        }
                        if (line.contains("http://www.apache.org/licenses/LICENSE-2.0")) {
                            hasTraditional = true
                            break
                        }
                    }
                    if (!hasSPDX) {
                        if (hasTraditional) {
                            noSPDX.add(file)
                        } else {
                            missing.add(file)
                        }
                    }
            }
    }

    if (noSPDX.isEmpty()) {
        println "All remaining files have Apache 2.0 headers"
    } else {
        println "We are standardizing with the SPDX style license headers."
        println "The following files contain the traditional license headers which are still valid:"
        noSPDX.each {
            f -> println "\t" + f.getPath()
        }
        println "If you need to make a content update, please replace the Apache license header comment text with:"
        println "\tSPDX-License-Identifier: Apache-2.0\n"
    }

    /*if (!missing.isEmpty()) {
        def error = "The following files are missing Apache 2.0 headers:\n"
        missing.each {
            f -> error += f.getPath() + "\n"
        }
        error += "Fatal Error - All files must have a license header"
        throw new IllegalArgumentException(error)
    }*/
}


javadoc {
    failOnError = false
    excludes = ['org/hyperledger/fabric/shim/impl/**',
                'org/hyperledger/fabric/shim/helper/**',
                'org/hyperledger/fabric/shim/ChaincodeBase.java']
    source = sourceSets.main.allJava

    classpath = sourceSets.main.compileClasspath
}

if (JavaVersion.current().isJava8Compatible()) {
    project.tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

build.dependsOn licenseCheck

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}